#!/usr/bin/env python3
"""
Script para hashear las contrase√±as existentes en la base de datos
Ejecutar una sola vez despu√©s de instalar las dependencias
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from sqlalchemy import text
from app.database import engine
from app.password_utils import hash_password

def hashear_contrase√±as_existentes():
    """
    Hashea todas las contrase√±as que est√°n en texto plano en la base de datos
    """
    try:
        with engine.connect() as conn:
            # Obtener todas las personas con contrase√±as en texto plano
            query_select = text("""
                SELECT ci, password 
                FROM persona 
                WHERE password IS NOT NULL 
                AND password != ''
                AND LENGTH(password) < 50  -- Las contrase√±as hasheadas son m√°s largas
            """)
            
            result = conn.execute(query_select)
            personas = result.fetchall()
            
            print(f"Encontradas {len(personas)} personas con contrase√±as en texto plano")
            
            # Hashear cada contrase√±a
            for persona in personas:
                ci = persona.ci
                password_plain = persona.password
                password_hashed = hash_password(password_plain)
                
                # Actualizar en la base de datos
                query_update = text("""
                    UPDATE persona 
                    SET password = :password_hashed 
                    WHERE ci = :ci
                """)
                
                conn.execute(query_update, {
                    "password_hashed": password_hashed,
                    "ci": ci
                })
                
                print(f"‚úÖ Contrase√±a hasheada para usuario CI: {ci}")
            
            # Confirmar cambios
            conn.commit()
            print(f"\nüéâ {len(personas)} contrase√±as hasheadas exitosamente!")
            
    except Exception as e:
        print(f"‚ùå Error hasheando contrase√±as: {str(e)}")
        return False
    
    return True

def verificar_hasheo():
    """
    Verifica que las contrase√±as fueron hasheadas correctamente
    """
    try:
        with engine.connect() as conn:
            query = text("""
                SELECT ci, password, LENGTH(password) as password_length
                FROM persona 
                WHERE password IS NOT NULL 
                ORDER BY ci
            """)
            
            result = conn.execute(query)
            personas = result.fetchall()
            
            print("\nüìä Estado de las contrase√±as:")
            print("CI\t\tLongitud\tHasheada")
            print("-" * 40)
            
            for persona in personas:
                es_hasheada = len(persona.password) >= 50  # bcrypt genera hashes de ~60 caracteres
                estado = "‚úÖ S√≠" if es_hasheada else "‚ùå No"
                print(f"{persona.ci}\t{persona.password_length}\t\t{estado}")
                
    except Exception as e:
        print(f"‚ùå Error verificando hasheo: {str(e)}")

if __name__ == "__main__":
    print("üîê Iniciando proceso de hasheo de contrase√±as...")
    
    # Hashear contrase√±as
    if hashear_contrase√±as_existentes():
        # Verificar resultado
        verificar_hasheo()
    else:
        print("‚ùå El proceso de hasheo fall√≥")
        sys.exit(1)
